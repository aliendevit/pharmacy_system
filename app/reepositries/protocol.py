from typing import Protocol, Iterable, Optional, List, Tuple
from datetime import date, datetime
from app.models.medicine import Medicine
from app.models.sale import Sale

class MedicinesRepo(Protocol):
    async def create(self, m: Medicine) -> Medicine: ...
    async def get(self, id: int) -> Optional[Medicine]: ...
    async def list(
        self,
        *,
        name: Optional[str] = None,
        manufacturer: Optional[str] = None
    ) -> Iterable[Medicine]: ...
    async def update(self, id: int, data: dict) -> Medicine: ...
    async def delete(self, id: int) -> None: ...
    async def expired(self, today: date) -> Iterable[Medicine]: ...
    async def low_stock(self, threshold: int) -> Iterable[Medicine]: ...

class SalesRepo(Protocol):
    async def create(self, s: Sale) -> Sale: ...
    async def list(
        self,
        *,
        since: Optional[datetime] = None,
        until: Optional[datetime] = None
    ) -> Iterable[Sale]: ...
    async def revenue_daily(self) -> List[Tuple[str, float]]: ...
    async def revenue_monthly(self) -> List[Tuple[str, float]]: ...